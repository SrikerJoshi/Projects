{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-05T20:02:38.390820Z","iopub.execute_input":"2024-09-05T20:02:38.391532Z","iopub.status.idle":"2024-09-05T20:02:38.772783Z","shell.execute_reply.started":"2024-09-05T20:02:38.391479Z","shell.execute_reply":"2024-09-05T20:02:38.771757Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/personal-info-txt/personal_info.txt\n","output_type":"stream"}]},{"cell_type":"code","source":"'''install these if not installed already\n\nif you want to run this on your local system using ollama you can download the packages \nneeded for it at https://ollama.com/download\nafter installation setup you have to open command prompt or terminal and type the \"command ollama pull llama3\" \nfor llama3 if you want other LLMs there are a bunch of others as well at https://github.com/ollama/ollama/blob/main/README.md\n\nAfter you install you can add a web interface to the chatbot if you want to use an open source project API to link to ollama\nyou can find it here https://github.com/open-webui/open-webui , i did not use this but you can use it if you like.\n\nthen come to VS code and pip install these packages using terminal \n\n\"pip install langchain langchain_ollama ollama\" then run this code below while adding personal_info.txt file \n in the code directory and you are all set.'''","metadata":{"execution":{"iopub.status.busy":"2024-09-05T20:02:53.997488Z","iopub.status.idle":"2024-09-05T20:02:53.997833Z","shell.execute_reply.started":"2024-09-05T20:02:53.997662Z","shell.execute_reply":"2024-09-05T20:02:53.997680Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from langchain_ollama import OllamaLLM\nfrom langchain_core.prompts import ChatPromptTemplate\n\ntemplate = ''' \n\nAnswer the question below\nhere is the conversation history : {context}\n\nquestion : {Question}\n\nAnswer :\n'''\n\nmodel = OllamaLLM(model=\"llama3\")\nprompt = ChatPromptTemplate.from_template(template)\nchain = prompt | model\n\ndef load_file_content(filename):\n    \"\"\"Load the content of the specified text file.\"\"\"\n    with open(filename, 'r') as file:\n        return file.read()\n    \ndef handle_convo(file_content):\n    context = file_content\n    print(\"\\nwelcome to my chatbot using LLama and langchain, type 'exit' to exit out of chatbot\\n\\nYou can use this chatbot to know info about sriker joshi\\n\")\n    while True:\n        user_input = input(\"You: \")\n        if user_input.lower() == \"exit\":\n            print(\"Exiting the chatbot. Context will be reset.\")\n            context = file_content  # Reset context to initial content after exiting\n            break\n        \n        result = chain.invoke({\"context\": context, \"Question\" : user_input})\n        print(\"chatbot: \", result)\n        context += f\"\\nUser: {user_input}\\n chatbot: {result}\"\n\nif __name__==\"__main__\":\n\n    file_content = load_file_content(\"/kaggle/input/personal-info-txt/personal_info.txt\")\n\n    handle_convo(file_content)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-05T20:16:21.415340Z","iopub.execute_input":"2024-09-05T20:16:21.416262Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"\nwelcome to my chatbot using LLama and langchain, type 'exit' to exit out of chatbot\n\nYou can use this chatbot to know info about sriker joshi\n\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}